// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Assign const result: Assign<{}, Omit<T, 'age'>> = rest 1`] = `"any"`;

exports[`Assign testType<Assign<Props, NewProps>>() 1`] = `"Pick<Pick<Props, \\"name\\" | \\"visible\\"> & Pick<NewProps, \\"age\\"> & Pick<NewProps, \\"other\\">, \\"name\\" | \\"age\\" | \\"visible\\" | \\"other\\">"`;

exports[`Brand testType<Brand<number, 'USD'>>() 1`] = `"Brand<number, \\"USD\\">"`;

exports[`DeepNonNullable testType<
      DeepNonNullable<NestedArrayProps>['first']['second'][number]['name']
    >() 1`] = `"string"`;

exports[`DeepNonNullable testType<
      ReturnType<DeepNonNullable<NestedFunctionProps>['first']['second']>
    >() 1`] = `"string"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedArrayProps>['first']>() 1`] = `"_DeepNonNullableObject<{ second?: ({ name?: string | null | undefined; } | null | undefined)[] | undefined; }>"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedArrayProps>['first']['second']>() 1`] = `"_DeepNonNullableArray<{ name?: string | null | undefined; } | null | undefined>"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedFunctionProps>['first']>() 1`] = `"_DeepNonNullableObject<{ second?: ((value: number) => string) | undefined; }>"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedFunctionProps>['first']['second']>() 1`] = `"(value: number) => string"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedProps>['first']>() 1`] = `"_DeepNonNullableObject<{ second?: { name?: string | null | undefined; } | null | undefined; }>"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedProps>['first']['second']>() 1`] = `"_DeepNonNullableObject<{ name?: string | null | undefined; }>"`;

exports[`DeepNonNullable testType<DeepNonNullable<NestedProps>['first']['second']['name']>() 1`] = `"string"`;

exports[`DeepPartial testType<ReturnType<NonNullable<typeof functionProp>>>() 1`] = `"string"`;

exports[`DeepPartial testType<typeof arrayItem.name>() 1`] = `"string | undefined"`;

exports[`DeepPartial testType<typeof arrayProp>() 1`] = `"_DeepPartialArray<{ name: string; }> | undefined"`;

exports[`DeepPartial testType<typeof functionProp>() 1`] = `"((value: number) => string) | undefined"`;

exports[`DeepPartial testType<typeof name>() 1`] = `"string | undefined"`;

exports[`DeepPartial testType<typeof nestedArrayPartial.first>() 1`] = `"_DeepPartialObject<{ second: { name: string; }[]; }> | undefined"`;

exports[`DeepPartial testType<typeof nestedFunctionPartial.first>() 1`] = `"_DeepPartialObject<{ second: (value: number) => string; }> | undefined"`;

exports[`DeepPartial testType<typeof partialNested.first>() 1`] = `"_DeepPartialObject<{ second: { name: string; }; }> | undefined"`;

exports[`DeepPartial testType<typeof second>() 1`] = `"_DeepPartialObject<{ name: string; }> | undefined"`;

exports[`DeepReadonly testType<DeepReadonly<NestedArrayProps>['first']>() 1`] = `"_DeepReadonlyObject<{ second: { name: string; }[]; }>"`;

exports[`DeepReadonly testType<DeepReadonly<NestedArrayProps>['first']['second']>() 1`] = `"_DeepReadonlyArray<{ name: string; }>"`;

exports[`DeepReadonly testType<DeepReadonly<NestedArrayProps>['first']['second'][number]['name']>() 1`] = `"string"`;

exports[`DeepReadonly testType<DeepReadonly<NestedFunctionProps>['first']>() 1`] = `"_DeepReadonlyObject<{ second: (value: number) => string; }>"`;

exports[`DeepReadonly testType<DeepReadonly<NestedFunctionProps>['first']['second']>() 1`] = `"(value: number) => string"`;

exports[`DeepReadonly testType<DeepReadonly<NestedProps>['first']>() 1`] = `"_DeepReadonlyObject<{ second: { name: string; }; }>"`;

exports[`DeepReadonly testType<DeepReadonly<NestedProps>['first']['second']>() 1`] = `"_DeepReadonlyObject<{ name: string; }>"`;

exports[`DeepReadonly testType<DeepReadonly<NestedProps>['first']['second']['name']>() 1`] = `"string"`;

exports[`DeepReadonly testType<ReturnType<DeepReadonly<NestedFunctionProps>['first']['second']>>() 1`] = `"string"`;

exports[`DeepRequired testType<DeepRequired<NestedArrayProps>['first']>() 1`] = `"_DeepRequiredObject<{ second?: ({ name?: string | null | undefined; } | undefined)[] | undefined; }>"`;

exports[`DeepRequired testType<DeepRequired<NestedArrayProps>['first']['second']>() 1`] = `"_DeepRequiredArray<{ name?: string | null | undefined; } | undefined>"`;

exports[`DeepRequired testType<DeepRequired<NestedArrayProps>['first']['second'][number]['name']>() 1`] = `"string | null"`;

exports[`DeepRequired testType<DeepRequired<NestedFunctionProps>['first']>() 1`] = `"_DeepRequiredObject<{ second?: ((value: number) => string) | undefined; }>"`;

exports[`DeepRequired testType<DeepRequired<NestedFunctionProps>['first']['second']>() 1`] = `"(value: number) => string"`;

exports[`DeepRequired testType<DeepRequired<NestedProps>['first']>() 1`] = `"_DeepRequiredObject<{ second?: { name?: string | null | undefined; } | undefined; }>"`;

exports[`DeepRequired testType<DeepRequired<NestedProps>['first']['second']>() 1`] = `"_DeepRequiredObject<{ name?: string | null | undefined; }>"`;

exports[`DeepRequired testType<DeepRequired<NestedProps>['first']['second']['name']>() 1`] = `"string | null"`;

exports[`DeepRequired testType<ReturnType<DeepRequired<NestedFunctionProps>['first']['second']>>() 1`] = `"string"`;

exports[`Diff const result: Diff<T, Pick<T, 'age'>> = rest 1`] = `"any"`;

exports[`Diff testType<Diff<Props, NewProps>>() 1`] = `"Pick<Props, \\"name\\" | \\"visible\\">"`;

exports[`Falsey testType<Falsey>() 1`] = `"Falsey"`;

exports[`FunctionKeys testType<FunctionKeys<MixedProps>>() 1`] = `"\\"setName\\""`;

exports[`Intersection const result: Intersection<T, Omit<T, 'age'>> = rest 1`] = `"any"`;

exports[`Intersection testType<Intersection<Props | NewProps, DefaultProps>>() 1`] = `"Pick<Props | NewProps, \\"age\\">"`;

exports[`Intersection testType<Intersection<Props, DefaultProps>>() 1`] = `"Pick<Props, \\"age\\">"`;

exports[`NonFunctionKeys testType<NonFunctionKeys<MixedProps>>() 1`] = `"\\"name\\""`;

exports[`NonUndefined testType<NonUndefined<'1' | '2' | undefined>>() 1`] = `"\\"1\\" | \\"2\\""`;

exports[`NonUndefined testType<NonUndefined<undefined>>() 1`] = `"never"`;

exports[`Omit const result: Omit<T, 'age'> = rest 1`] = `"any"`;

exports[`Omit testType<Omit<Props | NewProps, 'age'>>() 1`] = `"Omit<Props | NewProps, \\"age\\">"`;

exports[`Omit testType<Omit<Props, 'age'>>() 1`] = `"Omit<Props, \\"age\\">"`;

exports[`Omit testType<Omit<T, 'age'>>() 1`] = `"Omit<T, \\"age\\">"`;

exports[`OmitByValue testType<OmitByValue<Props, string | number>>() 1`] = `"Pick<Props, \\"visible\\">"`;

exports[`OmitByValue testType<OmitByValue<T, string | number>>() 1`] = `"Pick<T, { [Key in keyof T]: T[Key] extends string | number ? never : Key; }[keyof T]>"`;

exports[`Overwrite const result: Overwrite<Omit<T, 'age'>, T> = rest 1`] = `"any"`;

exports[`Overwrite testType<Overwrite<Props, NewProps>>() 1`] = `"Pick<Pick<Props, \\"name\\" | \\"visible\\"> & Pick<NewProps, \\"age\\">, \\"name\\" | \\"age\\" | \\"visible\\">"`;

exports[`PickByValue testType<PickByValue<Props, string | number>>() 1`] = `"Pick<Props, \\"name\\" | \\"age\\">"`;

exports[`Primitive testType<Primitive>() 1`] = `"Primitive"`;

exports[`PromiseType testType<PromiseType<Promise<string>>>() 1`] = `"string"`;

exports[`ReadonlyKeys testType<ReadonlyKeys<ReadWriteProps>>() 1`] = `"\\"a\\""`;

exports[`SetComplement testType<SetComplement<'1' | '2' | '3', '2' | '3'>>() 1`] = `"\\"1\\""`;

exports[`SetDifference testType<SetDifference<'1' | '2' | '3', '2' | '3' | '4'>>() 1`] = `"\\"1\\""`;

exports[`SetDifference testType<SetDifference<string | number | (() => void), () => void>>() 1`] = `"string | number"`;

exports[`SetIntersection testType<SetIntersection<'1' | '2' | '3', '2' | '3' | '4'>>() 1`] = `"\\"2\\" | \\"3\\""`;

exports[`SetIntersection testType<SetIntersection<string | number | (() => void), () => void>>() 1`] = `"() => void"`;

exports[`Subtract const result: Subtract<T, Pick<T, 'age'>> = rest 1`] = `"any"`;

exports[`Subtract testType<Subtract<Props, DefaultProps>>() 1`] = `"Pick<Props, \\"name\\" | \\"visible\\">"`;

exports[`SymmetricDifference testType<SymmetricDifference<'1' | '2' | '3', '2' | '3' | '4'>>() 1`] = `"\\"1\\" | \\"4\\""`;

exports[`Unionize testType<Unionize<Props>>() 1`] = `"{ name: string; } | { age: number; } | { visible: boolean; }"`;

exports[`WritableKeys testType<WritableKeys<ReadWriteProps>>() 1`] = `"\\"b\\""`;
